/*************
CREATE TABLES
**************/

CREATE TABLE REIMBURSEMENTS
(
    RID NUMBER NOT NULL,
    EID NUMBER NOT NULL,
    FIRSTNAME VARCHAR(300),
    LASTNAME VARCHAR(300),
    TYPEOFEVENT  NUMBER,
    DATEINSERTED DATE,
    COST NUMBER,
    DESCRIPTION VARCHAR2(300),
    JUSTIFICATION VARCHAR2(300),
    GRADINGFORMAT NUMBER,
    ATTACHED CLOB,
    DSAPPROVED NUMBER,
    DHAPPROVED NUMBER,
    BCAPPROVED NUMBER,
    STATUS NUMBER DEFAULT 0,
    COURSEDATESTART DATE,
    CHECK (COST BETWEEN 0 AND 1000),    
    CONSTRAINT PK_RID PRIMARY KEY(RID)    
);
CREATE TABLE REIMBURSEMENTX
(
    RID NUMBER NOT NULL,
    EID NUMBER NOT NULL,
    FIRSTNAME VARCHAR(300),
    LASTNAME VARCHAR(300),
    TYPEOFEVENT  NUMBER,
    DATEINSERTED DATE,
    COURSEDATESTART DATE,
    COST NUMBER,
    DESCRIPTION VARCHAR2(300),
    JUSTIFICATION VARCHAR2(300),
    GRADINGFORMAT NUMBER,
    DSAPPROVED NUMBER,
    DHAPPROVED NUMBER,
    BCAPPROVED NUMBER,
    STATUS NUMBER DEFAULT 0,
    CHECK (COST BETWEEN 0 AND 1000),    
    CONSTRAINT PK_RIDs PRIMARY KEY(RID)    
);
CREATE TABLE TypeOfEvent 
(
    TOEID NUMBER NOT NULL,
    Descrip Varchar2(300),
    CONSTRAINT PK_TOEID PRIMARY KEY (TOEID)
);
SELECT UserID FROM USERS WHERE USERNAME = 'Alexandra';
SELECT * FROM PRESENTATIONS;

INSERT INTO PRESENTATIONS (Emp_author, FOR_RID, AVAILABLEREIMBURSE, GRADETYPE, GRADE) VALUES (4,2, 1000, 2, 'A');
SELECT emp_author FROM PRESENTATIONS WHERE EMP_AUTHOR = 4;
SELECT * FROM PRESENTATIONS WHERE BCCONFIRM = 0;
CREATE TABLE PRESENTATIONS
(
    PID NUMBER NOT NULL,
    Emp_author NUMBER NOT NULL,
    FOR_RID NUMBER NOT NULL,
    AVAILABLEREIMBURSE NUMBER,
    GRADETYPE NUMBER,
    GRADE VARCHAR2(30),
    ATTACHED BLOB,
    BCCONFIRM NUMBER DEFAULT 0,
    DMCONFIRM NUMBER DEFAULT 0,
    CONSTRAINT PK_PID PRIMARY KEY(PID)
    
    
);
commit;
CREATE TABLE GRADINGFORMAT
(
    GFID NUMBER NOT NULL,
    GRADINGTYPE VARCHAR2(30),
    PASSINGGRADE VARCHAR(30),
    CONSTRAINT PK_GRADINGFORMAT PRIMARY KEY (GFID)
);

CREATE TABLE EMPLOYEES
(
    EID NUMBER NOT NULL,
    REPORTSTO NUMBER,
    DEPARTMENTHEAD NUMBER,
    EMPLOYEETYPE NUMBER,
    FIRSTNAME VARCHAR2(30),
    LASTNAME VARCHAR2(30),
    EMAIL VARCHAR(320),
    SSN NUMBER,
    AVAILREIMBURST NUMBER DEFAULT 1000,
    CONSTRAINT PK_EMP PRIMARY KEY (EID)
    
    
);

CREATE TABLE EMPLOYEETYPE
(
    EPTID NUMBER NOT NULL,
    EMPTYPE VARCHAR2(30),
    CONSTRAINT PK_EMPLOYEETYPE PRIMARY KEY (EPTID)
)

CREATE TABLE USERS
(
    USERID NUMBER NOT NULL,
    USERNAME VARCHAR(20),
    PASSWORD VARCHAR(20),
    CONSTRAINT PK_USERS PRIMARY KEY (USERID)
);


CREATE TABLE DIRECTSUPERVISORS
(
    DSID NUMBER NOT NULL,
    SUPERVISES NUMBER NOT NULL,
    FIRSTNAME VARCHAR(30),
    LASTNAME VARCHAR(30),
    CONSTRAINT PK_DS PRIMARY KEY (DSID)
);


CREATE TABLE DEPARTMENTHEADS
(
    DHID NUMBER NOT NULL,
    FIRSTNAME VARCHAR(30),
    LASTNAME VARCHAR(30),
    OVERSEES VARCHAR2(30),
    CONSTRAINT PK_DPTH PRIMARY KEY (DHID)

);

CREATE TABLE BENEFITCOORDINATORS
(
    BCID NUMBER NOT NULL,
    FIRSTNAME VARCHAR(30),
    LASTNAME VARCHAR(30),
    CONSTRAINT PK_BF PRIMARY KEY (BCID)
);

/***********
ALTER FOREIGN KEYS
***********/

ALTER TABLE USERS ADD CONSTRAINT uni_user1
UNIQUE (USERNAME);

ALTER TABLE REIMBURSEMENTS 
MODIFY 
(
    ATTACHED CLOB
);
DELETE FROM EMPLOYEES WHERE EID = 3;
DROP TABLE REIMBURSEMENTS; 
DROP TABLE PRESENTATIONS;
DROP TABLE GRADINGFORMAT; 
DROP TABLE EMPLOYEES; 
DROP TABLE USERS; 
DROP TABLE DIRECTSUPERVISORS; 
DROP TABLE DEPARTMENTHEADS; 
DROP TABLE BENEFITCOORDINATORS; 
 

ALTER TABLE EMPLOYEES ADD CONSTRAINT uni_SSN
UNIQUE (SSN);
/****************
INSERT VALUES INTO DATABASE
****************/
INSERT INTO TYPEOFEVENT VALUES(1, 'University Course');
INSERT INTO TYPEOFEVENT VALUES(2, 'Seminar');
INSERT INTO TYPEOFEVENT VALUES(3, 'Certification Prep Class');
INSERT INTO TYPEOFEVENT VALUES(4, 'Certification');
INSERT INTO TYPEOFEVENT VALUES(5, 'Technical Training');
INSERT INTO TYPEOFEVENT VALUES(6, 'Other');

INSERT INTO BENEFITCOORDINATORS VALUES(1,1);
INSERT INTO USERS VALUES(1,'BevCoSam', 'bc');
DELETE FROM USERS WHERE username='BevCoSam';
INSERT INTO EMPLOYEES VALUES (1,1,1,3,'Sam', 'Huang','sphuang@uci.edu', 65478231, 1000);

INSERT INTO DIRECTSUPERVISOR VALUES(1,2,2,1);
INSERT INTO USERS VALUES(2,'Ming', 'Huang');
INSERT INTO EMPLOYEES VALUES (2,1,2,4,'Ming','Huang','ming@cox.net', 12342562, 1000);


INSERT INTO USERS VALUES(3,'Cassie', 'hu');
INSERT INTO EMPLOYEES VALUES (3,2,2,2,'Cassie','Huang','cassie@cox.net', 12342522, 1000);
INSERT INTO REIMBURSEMENTS VALUES(4,3,'Cassie', 'Huang',5,SYSDATE, 200, 'Enthuware Test', 'Taken for Sky Diving Training',1, null, 0, 0, 0, 0, TO_DATE('2018-02-05', 'YYYY-MM-DD'));
commit;
INSERT INTO REIMBURSEMENTS VALUES(1,3,'Cassie', 'Huang',1,SYSDATE, 200, 'Enthuware Test', 'Taken for Mehrabs class to practice for OCA',1, null, 0, 0, 0, 0, '18-JUN-06');
INSERT INTO REIMBURSEMENTX VALUES(2,3,'Cassie', 'Huang',1,SYSDATE, 200, 'Enthuware Test', 'Taken for Mehrabs class to practice for OCA',1, 0, 0, 0, 0);
INSERT INTO REIMBURSEMENTS VALUES(1,3,'Cassie', 'Huang',1,'12-JAN-03', 200, 'Hardware Technical Training', 'Taken to be a leet IT',2, null, 1, 1, 1, 0);
commit;
INSERT INTO USERS VALUES(4,'Alexandra', 'Lai');
INSERT INTO EMPLOYEES VALUES (4,3,2,1,'Alexandra','Lai','ALEXANDRAHJ@COX.NET', 15624156, 1000);
INSERT INTO REIMBURSEMENTS VALUES(2,4,'Alexandra', 'Lai',2,SYSDATE, 200, 'Enthuware Test', 'Taken for Mehrabs class to practice Java',2, null, 0, 0, 0, 0, '18-JAN-18');
INSERT INTO REIMBURSEMENTS VALUES(3,4,'Alexandra', 'Lai',3,SYSDATE, 200, 'Test for Hormones', 'Taken to see how much hormones',2, null, 0, 0, 0, 0, '08-JAN-18');
DELETE FROM REIMBURSEMENTS WHERE RID = 1;
UPDATE EMPLOYEES SET reportsto=3 WHERE eid=4;
DELETE FROM REIMBURSEMENTS WHERE RID = 2;
DELETE FROM REIMBURSEMENTS WHERE RID = 1;
DELETE FROM PRESENTATIONS WHERE FOR_RID = 4;
SELECT * FROM PRESENTATIONS;
commit;
INSERT INTO DEPARTMENTS VALUES(1, 'Hackers');
INSERT INTO DEPARTMENTHEADS VALUES(1,2,1);

INSERT INTO DEPARTMENTS VALUES(2, 'BEAUTY');
INSERT INTO DEPARTMENTHEADS VALUES(2,3,2);

SELECT * FROM EMPLOYEES ORDER BY EID;
SELECT * FROM DEPARTMENTS;
SELECT * FROM DEPARTMENTHEADS;
SELECT * FROM USERS order by USERID;
SELECT * FROM USERS WHERE username='Cassie' AND password='hu';
SELECT * FROM PRESENTATIONS;
SELECT * FROM REIMBURSEMENTS;
SELECT nvl(coursedatestart, TO_DATE('2017-06-05', 'YYYY-MM-DD')) FROM REIMBURSEMENTS;
SELECT * FROM TYPEOFEVENT;
commit;
UPDATE REIMBURSEMENTS SET STATUS = 0 WHERE RID = 7;
commit;

SELECT FIRSTNAME, LASTNAME
FROM EMPLOYEES E
WHERE (SELECT USERID FROM USERS WHERE USERNAME = 'Alexandra') = E.EID;

SELECT  CASE WHEN username = 'Cassie' AND password = 'hu' THEN 1 ELSE 0 END
FROM USERS
WHERE username = 'Cassie';

SELECT UserID
FROM USERS
WHERE USERNAME = 'Ming';

/*FOR EMPLOYEES */
SELECT * FROM REIMBURSEMENTS R
WHERE (SELECT USERID FROM USERS WHERE USERNAME = 'Alexandra') = R.EID;
commit;

/* INSERTING INTO PRESENTATIONS */
INSERT INTO PRESENTATIONS (EID, RID, GRADETYPE)
SELECT EID, RID, TYPEOFEVENT
FROM REIMBURSEMENTS R
WHERE (SELECT USERID FROM USERS WHERE USERNAME = 'Alexandra') = (SELECT E.EID FROM EMPLOYEES E WHERE E.EID = R.EID);

UPDATE PRESENTATIONS P SET P.GRADE = 'A' WHERE P.EID = (SELECT USERID FROM USERS WHERE USERNAME = 'Alexandra');


    RID NUMBER NOT NULL,
    EID NUMBER NOT NULL,
    FIRSTNAME VARCHAR(300),
    LASTNAME VARCHAR(300),
    TYPEOFEVENT  NUMBER,
    DATEINSERTED DATE,
    COST NUMBER,
    DESCRIPTION VARCHAR2(300),
    JUSTIFICATION VARCHAR2(300),
    GRADINGFORMAT NUMBER,
    ATTACHED BLOB,
    DSAPPROVED NUMBER,
    DHAPPROVED NUMBER,
    BCAPPROVED NUMBER,
    STATUS NUMBER DEFAULT 0,
    CHECK (COST BETWEEN 0 AND 1000),    
    CONSTRAINT PK_RID PRIMARY KEY(RID)    



SELECT * FROM GRADINGFORMAT;
/* FOR SUPERVISORS QUERY */
SELECT * FROM REIMBURSEMENTS R
WHERE (SELECT UserID FROM USERS WHERE USERNAME = 'Cassie') = (SELECT E.REPORTSTO FROM EMPLOYEES E WHERE E.EID =  R.EID) AND DSAPPROVED = 0
UNION ALL
SELECT * FROM REIMBURSEMENTS R1
WHERE (SELECT UserID FROM USERS WHERE USERNAME = 'Cassie') = R1.EID;


/*FOR DEPARTMENT HEADS */
SELECT * FROM REIMBURSEMENTS R
WHERE (SELECT USERID FROM USERS WHERE USERNAME = 'Ming') = (SELECT E.DEPARTMENTHEAD FROM EMPLOYEES E WHERE E.EID = R.EID) AND DHAPPROVED = 0
UNION ALL
SELECT * FROM REIMBURSEMENTS R1
WHERE (SELECT UserID FROM USERS WHERE USERNAME = 'Ming') = R1.EID;

/*FOR DEPARTMENT HEADS AND SUPERVISOR */
SELECT DISTINCT * FROM REIMBURSEMENTS R
WHERE (SELECT USERID FROM USERS WHERE USERNAME = 'Ming') = (SELECT E.DEPARTMENTHEAD FROM EMPLOYEES E WHERE E.EID = R.EID) AND DHAPPROVED = 0
UNION 
SELECT DISTINCT * FROM REIMBURSEMENTS R1 WHERE (SELECT UserID FROM USERS WHERE USERNAME = 'Ming') = (SELECT E1.REPORTSTO FROM EMPLOYEES E1 WHERE E1.EID =  R1.EID) AND DSAPPROVED = 0;


SELECT EMPLOYEETYPE FROM EMPLOYEES E WHERE (SELECT USERID FROM USERS WHERE USERNAME = 'Ming') = EID;
/*FOR BEFCOS */
SELECT * FROM REIMBURSEMENTS R WHERE BCAPPROVED = 0;
UNION ALL
SELECT * FROM REIMBURSEMENTS R WHERE (SELECT UserID FROM USERS WHERE USERNAME = 'BevCoSam') = R.EID;
SELECT * FROM PRESENTATIONS;

/***************/
/* FUNCTIONS */
/************/
CREATE OR REPLACE FUNCTION SETTOTALREIMBURSEMENT(COST IN NUMBER, EMPID IN NUMBER)
    RETURN NUMBER AS
    NEWTOTALREIMBURSEMENT NUMBER;
    OLDTOTAL NUMBER;
BEGIN
    SELECT AVAILREIMBURST
    INTO OLDTOTAL
    FROM EMPLOYEES e
    WHERE e.EID = EMPID;
    NEWTOTALREIMBURSEMENT := OLDTOTAL - COST;
    RETURN NEWTOTALREIMBURSEMENT;
END;
/

CREATE OR REPLACE PROCEDURE SET_REIMBURSE (COST IN NUMBER, EMPID IN NUMBER) AS
   NEWTOTALAVAILREIMBURSEMENT NUMBER;
   BEGIN
        NEWTOTALAVAILREIMBURSEMENT := SETTOTALREIMBURSEMENT(COST, EMPID);
        UPDATE EMPLOYEES E SET AVAILREIMBURST = NEWTOTALAVAILREIMBURSEMENT WHERE E.EID = EMPID;
   END;
/
CREATE OR REPLACE PROCEDURE SET_REIMBURSE (COST IN NUMBER, EMPID IN NUMBER) AS
   NEWTOTALAVAILREIMBURSEMENT NUMBER;
   BEGIN
        IF
        NEWTOTALAVAILREIMBURSEMENT := SETTOTALREIMBURSEMENT(COST, EMPID);
        UPDATE EMPLOYEES E SET AVAILREIMBURST = NEWTOTALAVAILREIMBURSEMENT WHERE E.EID = EMPID;
   END;
/

CREATE OR REPLACE PROCEDURE update_DSreimbursements (REID IN NUMBER) AS
    APPROVED NUMBER := 1; 
    BEGIN
        
        UPDATE REIMBURSEMENTS SET DSAPPROVED = APPROVED WHERE RID = REID;
    END;
/
BEGIN
    UPDATE_DSREIMBURSEMENTS(6);
END;
/
SELECT * FROM PRESENTATIONS;
/***************/
/* CREATE TRIGGERS */
/**************/
CREATE OR REPLACE TRIGGER upon_StatusChange
    BEFORE UPDATE OF STATUS ON REIMBURSEMENTS 
    FOR EACH ROW
BEGIN
    SET_REIMBURSE(:OLD.COST, :OLD.EID);
    DELETE FROM PRESENTATIONS P WHERE :NEW.EID = P.Emp_author;
END;
/
commit;
DROP TRIGGER upon_StatusChange;
UPDATE REIMBURSEMENTS SET STATUS = 1 WHERE RID = 2;
SELECT DSAPPROVED FROM REIMBURSEMETS FOR UPDATE;
UPDATE REIMBURSEMENTS SET DSAPPROVED = 0 WHERE RID = 6;
commit;
UPDATE REIMBURSEMENTS SET DSAPPROVED = 0 WHERE RID = 2;
SELECT * FROM REIMBURSEMENTS;
commit;

/************
CREATE SEQUENCES
***********/
DROP SEQUENCE SQ_PRESENTATIONS;
CREATE SEQUENCE SQ_PRESENTATIONS   
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER Upon_PRESENTATIONS
BEFORE INSERT ON PRESENTATIONS
FOR EACH ROW    
BEGIN
    SELECT  SQ_PRESENTATIONS.NEXTVAL
    INTO :NEW.PID
    FROM DUAL;
END;
/

CREATE SEQUENCE SQ_REIMBURSEMENTS   
START WITH 3
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER Upon_InsertReimbursements
BEFORE INSERT ON Reimbursements
FOR EACH ROW
BEGIN
    SELECT  SQ_REIMBURSEMENTS.NEXTVAL
    INTO :NEW.RID
    FROM DUAL;
END;
/
DROP SEQUENCE SQ_USERS;
DROP TRIGGER Upon_InsertUsers;
CREATE SEQUENCE SQ_USERS  
START WITH 5
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER Upon_InsertUsers
BEFORE INSERT ON Users
FOR EACH ROW
BEGIN
    SELECT  SQ_USERS.NEXTVAL
    INTO :NEW.USERID
    FROM DUAL;
END;
/
DROP SEQUENCE SQ_EMPLOYEES;
DROP TRIGGER Upon_InsertEmployees;
CREATE SEQUENCE SQ_EMPLOYEES  
START WITH 5
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER Upon_InsertEmployees
BEFORE INSERT ON Employees
FOR EACH ROW
BEGIN
    SELECT  SQ_EMPLOYEES.NEXTVAL
    INTO :NEW.EID
    FROM DUAL;
END;
/

CREATE SEQUENCE SQ_DIRECTSUPERVISORS  
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER Upon_InsertDIRECTSUPERVISORS
BEFORE INSERT ON DIRECTSUPERVISORS
FOR EACH ROW
BEGIN
    SELECT  SQ_DIRECTSUPERVISORS.NEXTVAL
    INTO :NEW.DSID
    FROM DUAL;
END;
/